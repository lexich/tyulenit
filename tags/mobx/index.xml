<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Mobx on –¢—é–ª–µ–ΩIT—å</title>
    <link>https://tyulenit.com/tags/mobx/</link>
    <description>Recent content in Mobx on –¢—é–ª–µ–ΩIT—å</description>
    <image>
      <title>–¢—é–ª–µ–ΩIT—å</title>
      <url>https://tyulenit.com/seal.jpg</url>
      <link>https://tyulenit.com/seal.jpg</link>
    </image>
    <generator>Hugo -- 0.139.0</generator>
    <language>en</language>
    <lastBuildDate>Thu, 25 May 2023 12:54:11 +0400</lastBuildDate>
    <atom:link href="https://tyulenit.com/tags/mobx/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤ mobx</title>
      <link>https://tyulenit.com/ru/posts/2023-05-25-promisedmodel/</link>
      <pubDate>Thu, 25 May 2023 12:54:11 +0400</pubDate>
      <guid>https://tyulenit.com/ru/posts/2023-05-25-promisedmodel/</guid>
      <description>&lt;p&gt;–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –Ω–∞—à—É —Å–µ—Ä–∏—é –∑–∞–º–µ—Ç–æ–∫: &amp;ldquo;–ì–æ—Ç–æ–≤–∏–º mobx –≤ –æ–±—Ö–æ–¥ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏&amp;rdquo;. –í –ø—Ä–æ—à–ª—ã–π —Ä–∞–∑ –º—ã —Ä–µ–∞–ª–∏–∑–æ–≤–∞–ª–∏ –ø—Ä–∏–º–∏—Ç–∏–≤ &lt;code&gt;Subscriber&lt;/code&gt;.  –û–Ω –æ—á–µ–Ω—å –ø–æ–ª–µ–∑–Ω—ã–π, –Ω–æ –Ω–µ —É –∫–∞–∂–¥–æ–≥–æ –≤ –ø—Ä–æ–µ–∫—Ç–µ –µ—Å—Ç—å –≤–µ–±—Å–æ–∫–µ—Ç—ã –∏–ª–∏ –ø–æ–¥–æ–±–Ω—ã–µ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ã –¥–∞–Ω–Ω—ã—Ö.
–ß—Ç–æ –µ—Å—Ç—å —É –∫–∞–∂–¥–æ–≥–æ, —Ç–∞–∫ —ç—Ç–æ REST API. –†–∞–±–æ—Ç–∞ —Å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–º–∏ –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏, —Ö–æ—Ç—å –∏ –æ–ø–∏—Å–∞–Ω–∞, –Ω–æ —Å –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω–æ–π —Å—Ç–æ—Ä–æ–Ω—ã –≤—ã–∑—ã–≤–∞–µ—Ç –æ–¥–Ω–∏ –ø–æ–¥–æ–∑—Ä–µ–Ω–∏—è –∏ –º–Ω–æ–≥–æ boilerplate –∫–æ–¥–∞. –ï—Å—Ç—å –ø–∞–∫–µ—Ç &lt;code&gt;mobx-utils&lt;/code&gt;, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–¥–µ—Ä–∂–∏—Ç –º–µ—Ç–æ–¥ &lt;code&gt;fromPromise&lt;/code&gt;, –Ω–æ –æ—á–µ–Ω—å –Ω–µ–ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º–æ, –µ—Å–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –Ω–µ–º—É –≤–Ω–µ —Ä–µ–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏ —Ç–æ –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–Ω–Ω—É –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä.&lt;/p&gt;</description>
    </item>
    <item>
      <title>The Subscriber Pattern in MobX</title>
      <link>https://tyulenit.com/en/posts/2023-05-22-subscriber/</link>
      <pubDate>Mon, 22 May 2023 12:53:38 +0400</pubDate>
      <guid>https://tyulenit.com/en/posts/2023-05-22-subscriber/</guid>
      <description>&lt;p&gt;The last time I wrote about &lt;code&gt;createAtomSubscriber&lt;/code&gt; and told you about its extreme usefulness. I propose to write a &lt;code&gt;Subscriber&lt;/code&gt; primitive for reactive subscription/unsubscription/resubscription to data sources. Let&amp;rsquo;s start with an example of using such a construction.&lt;/p&gt;
&lt;p&gt;Imagine that we have a &lt;code&gt;receiveData&lt;/code&gt; function that generates data after passing it a text &lt;code&gt;id&lt;/code&gt; and a reactive variable &lt;code&gt;$id&lt;/code&gt;. Using &lt;code&gt;Subscriber&lt;/code&gt; we will create a reactive subscription. When &lt;code&gt;getId&lt;/code&gt; returns a value other than &lt;code&gt;undefined&lt;/code&gt; and &lt;code&gt;subscriber.data&lt;/code&gt; is under observation, &lt;code&gt;receiveData&lt;/code&gt; will be started and, using &lt;code&gt;push&lt;/code&gt;, we will save the last received value.
When the value returned by &lt;code&gt;getId&lt;/code&gt; changes (it is important that it is reactive), the subscription will be canceled. If the new value is not &lt;code&gt;undefined&lt;/code&gt;, then a resubscription will occur.
When &lt;code&gt;subscriber.data&lt;/code&gt; goes out of observation, an unsubscription always occurs, regardless of &lt;code&gt;getId&lt;/code&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>–ü–∞—Ç—Ç–µ—Ä–Ω –ø–æ–¥–ø–∏—Å—á–∏–∫ –≤ mobx</title>
      <link>https://tyulenit.com/ru/posts/2023-05-22-subscriber/</link>
      <pubDate>Mon, 22 May 2023 12:53:38 +0400</pubDate>
      <guid>https://tyulenit.com/ru/posts/2023-05-22-subscriber/</guid>
      <description>&lt;p&gt;–í –ø—Ä–æ—à–ª—ã–π —Ä–∞–∑ —è –ø–∏—Å–∞–ª –ø—Ä–æ &lt;code&gt;createAtomSubscriber&lt;/code&gt; –∏ —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞–ª –ø—Ä–æ –µ–≥–æ —á—Ä–µ–∑–≤—ã—á–∞–π–Ω—É—é –ø–æ–ª–µ–∑–Ω–æ—Å—Ç—å. –ü—Ä–µ–¥–ª–∞–≥–∞—é –Ω–∞–ø–∏—Å–∞—Ç—å  –ø—Ä–∏–º–∏—Ç–∏–≤ &lt;code&gt;Subscriber&lt;/code&gt; –¥–ª—è —Ä–µ–∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏/–æ—Ç–ø–∏—Å–∫–∏/–ø–µ—Ä–µ–ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–∞–Ω–Ω—ã—Ö. –ù–∞—á–Ω–µ–º —Å –ø—Ä–∏–º–µ—Ä–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–æ–¥–æ–±–Ω–æ–π –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏.&lt;/p&gt;
&lt;p&gt;–ü—Ä–µ–¥—Å—Ç–∞–≤–∏–º, —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏—è &lt;code&gt;receiveData&lt;/code&gt;, –∫–æ—Ç–æ—Ä–∞—è –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ, –ø–æ—Å–ª–µ –ø–µ—Ä–µ–¥–∞—á–∏ –µ–π —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ &lt;code&gt;id&lt;/code&gt;  –∏  —Ä–µ–∞–∫—Ç–∏–≤–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é &lt;code&gt;$id&lt;/code&gt;. –° –ø–æ–º–æ—â—å—é  &lt;code&gt;Subscriber&lt;/code&gt; —Å–æ–∑–¥–∞–¥–∏–º —Ä–µ–∞–∫—Ç–∏–≤–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É. –ö–æ–≥–¥–∞ &lt;code&gt;getId&lt;/code&gt; –±—É–¥–µ—Ç –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –æ—Ç–ª–∏—á–Ω–æ–µ –æ—Ç &lt;code&gt;undefined&lt;/code&gt; –∏ &lt;code&gt;subscriber.data&lt;/code&gt; –±—É–¥–µ—Ç –ø–æ–¥ –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ–º - —É –Ω–∞—Å –∑–∞–ø—É—Å—Ç–∏—Ç—Å—è &lt;code&gt;receiveData&lt;/code&gt; –∏, —Å –ø–æ–º–æ—â—å—é &lt;code&gt;push&lt;/code&gt;, –º—ã –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–µ –ø–æ–ª—É—á–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.
–ö–æ–≥–¥–∞ –∑–Ω–∞—á–µ–Ω–∏–µ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–µ  &lt;code&gt;getId&lt;/code&gt;, –∏–∑–º–µ–Ω–∏—Ç—Å—è (–≤–∞–∂–Ω–æ —á—Ç–æ–±—ã –æ–Ω–æ –±—ã–ª–æ —Ä–µ–∞–∫—Ç–∏–≤–Ω—ã–º), –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç –æ—Ç–ø–∏—Å–∫–∞. –ï—Å–ª–∏ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –±—É–¥–µ—Ç –Ω–µ &lt;code&gt;undefined&lt;/code&gt;, —Ç–æ –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç –ø–µ—Ä–µ–ø–æ–¥–ø–∏—Å–∫–∞.
–ö–æ–≥–¥–∞ &lt;code&gt;subscriber.data&lt;/code&gt; –≤—ã—Ö–æ–¥–∏—Ç –∏–∑ –ø–æ–¥ –Ω–∞–±–ª—é–¥–µ–Ω–∏—è –≤—Å–µ–≥–¥–∞ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –æ—Ç–ø–∏—Å–∫–∞, –≤–Ω–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç &lt;code&gt;getId&lt;/code&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Working with atoms in mobx</title>
      <link>https://tyulenit.com/en/posts/2023-05-18-createatom/</link>
      <pubDate>Thu, 18 May 2023 12:52:56 +0400</pubDate>
      <guid>https://tyulenit.com/en/posts/2023-05-18-createatom/</guid>
      <description>&lt;p&gt;The &lt;code&gt;mobx&lt;/code&gt; library has a very interesting primitive atom, which is created via &lt;code&gt;createAtom&lt;/code&gt;. With its help, you can create very interesting constructions and build almost the entire architecture of the application. What does the documentation tell us:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;`createAtom`

{üöÄ} Usage: `createAtom(name, onBecomeObserved?, onBecomeUnobserved?)`

Creates your own observable data structure and hooks it up to MobX. Used internally by all observable data types. Atom exposes two `report` methods to notify MobX with when:

- `reportObserved()`: the atom has become observed, and should be considered part of the dependency tree of the current derivation.
- `reportChanged()`: the atom has changed, and all derivations depending on it should be invalidated.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Let&amp;rsquo;s wrap it a little so that it will be more convenient to use it in the future.&lt;/p&gt;</description>
    </item>
    <item>
      <title>–†–∞–±–æ—Ç–∞ —Å atom –≤ mobx</title>
      <link>https://tyulenit.com/ru/posts/2023-05-18-createatom/</link>
      <pubDate>Thu, 18 May 2023 12:52:56 +0400</pubDate>
      <guid>https://tyulenit.com/ru/posts/2023-05-18-createatom/</guid>
      <description>&lt;p&gt;–í –±–∏–±–ª–∏–æ—Ç–µ–∫–µ &lt;code&gt;mobx&lt;/code&gt;  –µ—Å—Ç—å –æ—á–µ–Ω—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –ø—Ä–∏–º–∏—Ç–∏–≤ –∞—Ç–æ–º, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–∑–¥–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ &lt;code&gt;createAtom&lt;/code&gt;. –° –µ–≥–æ –ø–æ–º–æ—â—å—é –º–æ–∂–Ω–æ —Å–æ–∑–¥–∞–≤–∞—Ç—å –æ—á–µ–Ω—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –∏ –≤–æ–æ–±—â–µ –ø–æ—Å—Ç—Ä–æ–∏—Ç—å —á—É—Ç—å –ª–∏ –Ω–µ –≤—Å—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è. –ß—Ç–æ –Ω–∞–º –≥–æ–≤–æ—Ä–∏—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;`createAtom`

{üöÄ} Usage:¬†`createAtom(name, onBecomeObserved?, onBecomeUnobserved?)`

Creates your own observable data structure and hooks it up to MobX. Used internally by all observable data types. Atom exposes two¬†`report`¬†methods to notify MobX with when:

-   `reportObserved()`: the atom has become observed, and should be considered part of the dependency tree of the current derivation.
-   `reportChanged()`: the atom has changed, and all derivations depending on it should be invalidated.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;–ê –¥–∞–≤–∞–π—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –ø–µ—Ä–µ–∑–∞–≤–µ—Ä–Ω–µ–º –µ–≥–æ, —á—Ç–æ–±—ã –≤ –¥–∞–ª—å–Ω–µ–π—à–µ–º —É–¥–æ–±–Ω–µ–µ –±—ã–ª–æ –∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
